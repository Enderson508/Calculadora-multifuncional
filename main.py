import streamlit as st
import json
import uuid
import bcrypt
import os

# Carrega ou cria arquivo de dados
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f, indent=4)

def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

def check_password(password, hashed):
    return bcrypt.checkpw(password.encode(), hashed.encode())

# ---------------- Fun√ß√µes de c√°lculo ---------------- #

import streamlit as st

def aba_calculos():
    st.header("üßÆ C√°lculos F√≠sico-Matem√°ticos")

    opcoes = [
        "Velocidade M√©dia",
        "For√ßa Resultante",
        "F√≥rmula de Bhaskara",
        "Corrente El√©trica",
        "√Årea de Figuras Geom√©tricas",
        "For√ßa Gravitacional",
        "Torricelli",
        "Carga El√©trica",
        "Tempo"
    ]
    
    escolha = st.selectbox("Escolha o tipo de c√°lculo:", opcoes)

    if escolha == "Velocidade M√©dia":
        st.subheader("Velocidade M√©dia: v = Œîs / Œît")
        distancia = st.number_input("Digite a dist√¢ncia (Œîs) em metros:", step=1.0)
        tempo = st.number_input("Digite o tempo (Œît) em segundos:", step=1.0)
        if st.button("Calcular Velocidade"):
            if tempo != 0:
                velocidade = distancia / tempo
                # Exibi√ß√£o do c√°lculo passo a passo
                steps = f"\n## C√°lculo da Velocidade M√©dia (m/s)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$v = \\frac{{\\Delta s}}{{\\Delta t}}$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$v = \\frac{{{distancia}}}{{{tempo}}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$v = {velocidade:.2f} \\text{{ m/s}}$$\n"
                st.markdown(steps)
                st.success(f"A velocidade m√©dia √© {velocidade:.2f} m/s")
            else:
                st.error("O tempo n√£o pode ser zero!")

    elif escolha == "For√ßa Resultante":
        st.subheader("For√ßa Resultante: F = m * a")
        massa = st.number_input("Digite a massa (m) em kg:", step=1.0)
        aceleracao = st.number_input("Digite a acelera√ß√£o (a) em m/s¬≤:", step=1.0)
        if st.button("Calcular For√ßa"):
            forca = massa * aceleracao
            steps = f"\n## C√°lculo da For√ßa Resultante (N)\n" \
                    f"\n### F√≥rmula\n" \
                    f"\n$$F = m \\times a$$\n" \
                    f"\n### Substituindo os valores\n" \
                    f"\n$$F = {massa} \\times {aceleracao}$$\n" \
                    f"\n### Resultado\n" \
                    f"\n$$F = {forca:.2f} \\text{{ N}}$$\n"
            st.markdown(steps)
            st.success(f"A for√ßa resultante √© {forca:.2f} N")

    elif escolha == "F√≥rmula de Bhaskara":
        st.subheader("Bhaskara: ax¬≤ + bx + c = 0")
        a = st.number_input("Digite o valor de a:")
        b = st.number_input("Digite o valor de b:")
        c = st.number_input("Digite o valor de c:")
        if st.button("Calcular Bhaskara"):
            delta = b**2 - 4*a*c
            steps = f"\n## C√°lculo das Ra√≠zes pela F√≥rmula de Bhaskara\n" \
                    f"\n### F√≥rmula\n" \
                    f"\n$$x = \\frac{{-b \\pm \\sqrt{{b^2 - 4ac}}}}{{2a}}$$\n" \
                    f"\n### C√°lculo do Discriminante (Œî)\n" \
                    f"\n$$\\Delta = b^2 - 4ac$$\n" \
                    f"\n$$\\Delta = {b}^2 - 4 \\times {a} \\times {c}$$\n" \
                    f"\n$$\\Delta = {delta:.2f}$$\n"
            
            if delta < 0:
                steps += f"\n### Resultado\n" \
                         f"\nN√£o existem ra√≠zes reais (Œî < 0)\n"
                st.markdown(steps)
                st.warning("N√£o existem ra√≠zes reais.")
            else:
                x1 = (-b + delta**0.5) / (2*a)
                x2 = (-b - delta**0.5) / (2*a)
                steps += f"\n### C√°lculo das Ra√≠zes\n" \
                         f"\n$$x_1 = \\frac{{-b + \\sqrt{{\\Delta}}}}{{2a}} = \\frac{{-{b} + \\sqrt{{{delta:.2f}}}}}{{2 \\times {a}}} = {x1:.2f}$$\n" \
                         f"\n$$x_2 = \\frac{{-b - \\sqrt{{\\Delta}}}}{{2a}} = \\frac{{-{b} - \\sqrt{{{delta:.2f}}}}}{{2 \\times {a}}} = {x2:.2f}$$\n" \
                         f"\n### Resultado\n" \
                         f"\n$$x_1 = {x1:.2f}$$\n" \
                         f"\n$$x_2 = {x2:.2f}$$\n"
                st.markdown(steps)
                st.success(f"x‚ÇÅ = {x1:.2f}, x‚ÇÇ = {x2:.2f}")

    elif escolha == "Corrente El√©trica":
        st.subheader("Corrente El√©trica: I = Q / Œît")
        carga = st.number_input("Digite a carga el√©trica (Q) em Coulombs:", step=1.0)
        tempo = st.number_input("Digite o tempo (Œît) em segundos:", step=1.0)
        if st.button("Calcular Corrente"):
            if tempo != 0:
                corrente = carga / tempo
                steps = f"\n## C√°lculo da Corrente El√©trica (A)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$I = \\frac{{Q}}{{\\Delta t}}$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$I = \\frac{{{carga}}}{{{tempo}}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$I = {corrente:.2f} \\text{{ A}}$$\n"
                st.markdown(steps)
                st.success(f"A corrente el√©trica √© {corrente:.2f} A")
            else:
                st.error("O tempo n√£o pode ser zero!")

    elif escolha == "√Årea de Figuras Geom√©tricas":
        figura = st.selectbox("Escolha a figura:", ["Quadrado", "Ret√¢ngulo", "Tri√¢ngulo", "C√≠rculo"])
        if figura == "Quadrado":
            lado = st.number_input("Digite o lado:", step=1.0)
            if st.button("Calcular √Årea do Quadrado"):
                area = lado ** 2
                steps = f"\n## C√°lculo da √Årea do Quadrado\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$A = lado^2$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$A = {lado}^2$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$A = {area:.2f}$$\n"
                st.markdown(steps)
                st.success(f"A √°rea √© {area:.2f}")
        elif figura == "Ret√¢ngulo":
            base = st.number_input("Base:", step=1.0)
            altura = st.number_input("Altura:", step=1.0)
            if st.button("Calcular √Årea do Ret√¢ngulo"):
                area = base * altura
                steps = f"\n## C√°lculo da √Årea do Ret√¢ngulo\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$A = base \\times altura$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$A = {base} \\times {altura}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$A = {area:.2f}$$\n"
                st.markdown(steps)
                st.success(f"A √°rea √© {area:.2f}")
        elif figura == "Tri√¢ngulo":
            base = st.number_input("Base:", step=1.0)
            altura = st.number_input("Altura:", step=1.0)
            if st.button("Calcular √Årea do Tri√¢ngulo"):
                area = (base * altura) / 2
                steps = f"\n## C√°lculo da √Årea do Tri√¢ngulo\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$A = \\frac{{base \\times altura}}{{2}}$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$A = \\frac{{{base} \\times {altura}}}{{2}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$A = {area:.2f}$$\n"
                st.markdown(steps)
                st.success(f"A √°rea √© {area:.2f}")
        elif figura == "C√≠rculo":
            raio = st.number_input("Raio:", step=1.0)
            if st.button("Calcular √Årea do C√≠rculo"):
                area = 3.1416 * raio ** 2
                steps = f"\n## C√°lculo da √Årea do C√≠rculo\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$A = \\pi \\times raio^2$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$A = 3.1416 \\times {raio}^2$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$A = {area:.2f}$$\n"
                st.markdown(steps)
                st.success(f"A √°rea √© {area:.2f}")

    elif escolha == "For√ßa Gravitacional":
        st.subheader("For√ßa Gravitacional: F = G * (m1 * m2) / d¬≤")
        G = 6.67430e-11
        m1 = st.number_input("Massa 1 (kg):", step=1.0)
        m2 = st.number_input("Massa 2 (kg):", step=1.0)
        distancia = st.number_input("Dist√¢ncia (m):", step=1.0)
        if st.button("Calcular For√ßa Gravitacional"):
            if distancia != 0:
                Fg = G * (m1 * m2) / distancia**2
                steps = f"\n## C√°lculo da For√ßa Gravitacional (N)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$F = G \\times \\frac{{m_1 \\times m_2}}{{d^2}}$$\n" \
                        f"\n### Constante Gravitacional\n" \
                        f"\n$$G = 6.67430 \\times 10^{{-11}} \\text{{ Nm}}^2/\\text{{kg}}^2$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$F = 6.67430 \\times 10^{{-11}} \\times \\frac{{{m1} \\times {m2}}}{{{distancia}^2}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$F = {Fg:.4e} \\text{{ N}}$$\n"
                st.markdown(steps)
                st.success(f"A for√ßa gravitacional √© {Fg:.4e} N")
            else:
                st.error("A dist√¢ncia n√£o pode ser zero!")

    elif escolha == "Torricelli":
        st.subheader("Torricelli: v¬≤ = v‚ÇÄ¬≤ + 2*a*Œîs")
        v0 = st.number_input("Velocidade inicial (v‚ÇÄ):", step=1.0)
        a = st.number_input("Acelera√ß√£o (a):", step=1.0)
        s = st.number_input("Deslocamento (Œîs):", step=1.0)
        if st.button("Calcular Velocidade Final"):
            vf2 = v0**2 + 2*a*s
            if vf2 >= 0:
                vf = vf2 ** 0.5
                steps = f"\n## C√°lculo da Velocidade Final (Torricelli)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$v^2 = v_0^2 + 2 \\times a \\times \\Delta s$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$v^2 = {v0}^2 + 2 \\times {a} \\times {s}$$\n" \
                        f"\n$$v^2 = {v0**2:.2f} + {2*a*s:.2f}$$\n" \
                        f"\n$$v^2 = {vf2:.2f}$$\n" \
                        f"\n$$v = \\sqrt{{{vf2:.2f}}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$v = {vf:.2f} \\text{{ m/s}}$$\n"
                st.markdown(steps)
                st.success(f"A velocidade final √© {vf:.2f} m/s")
            else:
                steps = f"\n## C√°lculo da Velocidade Final (Torricelli)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$v^2 = v_0^2 + 2 \\times a \\times \\Delta s$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$v^2 = {v0}^2 + 2 \\times {a} \\times {s}$$\n" \
                        f"\n$$v^2 = {v0**2:.2f} + {2*a*s:.2f}$$\n" \
                        f"\n$$v^2 = {vf2:.2f}$$\n" \
                        f"\n### Resultado\n" \
                        f"\nN√£o existe solu√ß√£o real (raiz quadrada de n√∫mero negativo)\n"
                st.markdown(steps)
                st.warning("Resultado inv√°lido (velocidade imagin√°ria).")

    elif escolha == "Carga El√©trica":
        st.subheader("Carga El√©trica: Q = n * e")
        n = st.number_input("N√∫mero de el√©trons (n):", step=1.0)
        e = 1.6e-19  # Carga elementar
        if st.button("Calcular Carga"):
            Q = n * e
            steps = f"\n## C√°lculo da Carga El√©trica (C)\n" \
                    f"\n### F√≥rmula\n" \
                    f"\n$$Q = n \\times e$$\n" \
                    f"\n### Carga Elementar\n" \
                    f"\n$$e = 1.6 \\times 10^{{-19}} \\text{{ C}}$$\n" \
                    f"\n### Substituindo os valores\n" \
                    f"\n$$Q = {n} \\times 1.6 \\times 10^{{-19}}$$\n" \
                    f"\n### Resultado\n" \
                    f"\n$$Q = {Q:.4e} \\text{{ C}}$$\n"
            st.markdown(steps)
            st.success(f"A carga el√©trica √© {Q:.4e} C")

    elif escolha == "Tempo":
        st.subheader("Tempo: t = d / v")
        d = st.number_input("Dist√¢ncia (d):", step=1.0)
        v = st.number_input("Velocidade (v):", step=1.0)
        if st.button("Calcular Tempo"):
            if v != 0:
                t = d / v
                steps = f"\n## C√°lculo do Tempo (s)\n" \
                        f"\n### F√≥rmula\n" \
                        f"\n$$t = \\frac{{d}}{{v}}$$\n" \
                        f"\n### Substituindo os valores\n" \
                        f"\n$$t = \\frac{{{d}}}{{{v}}}$$\n" \
                        f"\n### Resultado\n" \
                        f"\n$$t = {t:.2f} \\text{{ s}}$$\n"
                st.markdown(steps)
                st.success(f"O tempo √© {t:.2f} s")
            else:
                st.error("A velocidade n√£o pode ser zero!")


# ---------------- Autentica√ß√£o ---------------- #

def login():
    st.subheader("Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        users = load_users()
        for user in users.values():
            if isinstance(user, dict) and user.get("username") == username and check_password(password, user.get("password", "")):
                st.session_state["logged_user"] = user  # Aqui guarda o dicion√°rio inteiro do usu√°rio logado
                st.success("Login bem-sucedido!")
                st.rerun()
                return
        st.error("Usu√°rio ou senha incorretos.")

def register():
    st.subheader("Registrar")
    username = st.text_input("Novo usu√°rio")
    password = st.text_input("Nova senha", type="password")
    if st.button("Registrar"):
        users = load_users()
        if any(user.get("username") == username for user in users.values() if isinstance(user, dict)):
            st.error("Usu√°rio j√° existe.")
        else:
            user_id = str(uuid.uuid4())
            users[user_id] = {
                "id": user_id,
                "username": username,
                "password": hash_password(password),
                "amigos": [],
                "notificacoes": [],
                "anotacao": ""
            }
            save_users(users)
            st.success("Registrado com sucesso! Fa√ßa login.")


def logout():
    if st.button("Sair"):
        st.session_state.logged_user = None
        st.rerun()

# ---------------- Interface ---------------- #

def show_notificacoes(logged_user):
    st.subheader("Notifica√ß√µes")
    
    # Carrega todos os usu√°rios
    users = load_users()
    
    # Verifica se o usu√°rio logado existe no sistema
    if logged_user["id"] not in users:
        st.error("Erro: seu usu√°rio n√£o foi encontrado no sistema!")
        return
    
    user = users[logged_user["id"]]
    
    # Garante que o usu√°rio tem a lista de notifica√ß√µes
    if "notificacoes" not in user:
        user["notificacoes"] = []
    
    # Verifica se h√° notifica√ß√µes
    if not user["notificacoes"]:
        st.info("Voc√™ n√£o tem notifica√ß√µes no momento.")
        return
    
    # Processa cada notifica√ß√£o
    for solicitante_id in user["notificacoes"].copy():  # Usamos copy() para iterar sobre uma c√≥pia
        if solicitante_id not in users:
            # Remove IDs inv√°lidos
            user["notificacoes"].remove(solicitante_id)
            continue
            
        solicitante = users[solicitante_id]
        st.markdown(f"**{solicitante['username']}** quer ser seu amigo.")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button(f"Aceitar {solicitante['username']}", key=f"aceitar_{solicitante_id}"):
                # Adiciona como amigo em ambos os usu√°rios
                if "amigos" not in user:
                    user["amigos"] = []
                if "amigos" not in solicitante:
                    solicitante["amigos"] = []
                
                if solicitante_id not in user["amigos"]:
                    user["amigos"].append(solicitante_id)
                if user["id"] not in solicitante["amigos"]:
                    solicitante["amigos"].append(user["id"])
                
                # Remove a notifica√ß√£o
                user["notificacoes"].remove(solicitante_id)
                save_users(users)
                st.success(f"Voc√™ e {solicitante['username']} agora s√£o amigos!")
                st.rerun()
        
        with col2:
            if st.button(f"Recusar {solicitante['username']}", key=f"recusar_{solicitante_id}"):
                user["notificacoes"].remove(solicitante_id)
                save_users(users)
                st.info(f"Pedido de {solicitante['username']} recusado.")
                st.rerun()

def show_perfil(user):
    st.title(f"Perfil: {user['username']}")
    st.subheader(f"ID: {user['id']}")
    
    # Anota√ß√µes
    anotacao = st.text_area("Anota√ß√£o pessoal:", value=user.get("anotacao", ""))
    if st.button("Salvar anota√ß√£o"):
        users = load_users()
        users[user["id"]]["anotacao"] = anotacao
        save_users(users)
        st.success("Anota√ß√£o salva!")

    # Amigos
    st.subheader("Amigos:")
    if "amigos" in user and user["amigos"]:
        users = load_users()
        for amigo_id in user["amigos"]:
            if amigo_id in users:
                st.write(f"- {users[amigo_id]['username']}")
            else:
                st.write(f"- Usu√°rio desconhecido (ID: {amigo_id})")
    else:
        st.info("Nenhum amigo adicionado.")

    # Buscar amigo
    st.subheader("Buscar usu√°rio por ID")
    search_id = st.text_input("ID do usu√°rio")
    if st.button("Enviar pedido de amizade"):
        users = load_users()
        
        if not search_id:
            st.error("Por favor, insira um ID v√°lido")
        elif search_id == user["id"]:
            st.error("Voc√™ n√£o pode adicionar a si mesmo como amigo")
        elif search_id not in users:
            st.error("ID de usu√°rio n√£o encontrado")
        else:
            target_user = users[search_id]
            
            # Inicializa notifica√ß√µes se n√£o existirem
            if "notificacoes" not in target_user:
                target_user["notificacoes"] = []
            
            # Verifica se j√° existe um pedido pendente
            if user["id"] in target_user["notificacoes"]:
                st.warning("Voc√™ j√° enviou um pedido para este usu√°rio")
            else:
                target_user["notificacoes"].append(user["id"])
                save_users(users)
                st.success("Pedido de amizade enviado com sucesso!")



# ---------------- Execu√ß√£o Principal ---------------- #

def main():
    st.sidebar.title("Menu")
    if "logged_user" not in st.session_state:
        st.session_state.logged_user = None

    if st.session_state.logged_user:
        opcao = st.sidebar.selectbox("Escolha a op√ß√£o", ["Perfil", "Notifica√ß√µes", "C√°lculos", "Sair"])
        if opcao == "Perfil":
            show_perfil(st.session_state.logged_user)
        elif opcao == "Notifica√ß√µes":
            show_notificacoes(st.session_state.logged_user)
        elif opcao == "C√°lculos":
            aba_calculos()
        elif opcao == "Sair":
            logout()
    else:
        escolha = st.sidebar.radio("Login ou Registro", ["Login", "Registrar"], key="login_registro_radio")
        if escolha == "Login":
            login()
        else:
            register()

if __name__ == "__main__":
    main()
